generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleUser {
  user
  admin
  superadmin
}

model User {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(255)
  email     String     @unique
  phone     String     @db.VarChar(15)
  password  String
  role      RoleUser   @default(user)
  address   String
  isActive  Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[]
  Seller    Seller[]
  Cart      Cart[]
  Order     Order[]
}

model Seller {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  storeName     String    @map("store_name") @db.VarChar(255)
  storeLocation String    @map("store_location") @db.VarChar(255)
  verified      Boolean   @default(false)
  description   String    @db.Text
  bankName      String
  accountName   String
  accountNumber String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]
  user          User      @relation(fields: [userId], references: [id])
  Order         Order[]
  wallet        Wallet?
}

model Wallet {
  id           String              @id @default(uuid())
  sellerId     String              @unique
  balance      Float               @default(0) // saldo sementara
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  seller       Seller              @relation(fields: [sellerId], references: [id])
  transactions WalletTransaction[]
}

model WalletTransaction {
  id        String   @id @default(uuid())
  walletId  String
  amount    Float
  type      String // "CREDIT" (dari order) / "DEBIT" (withdraw)
  createdAt DateTime @default(now())
  wallet    Wallet   @relation(fields: [walletId], references: [id])
}

model Category {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(255)
  imageUrl  String
  createdBy String    @map("created_by")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [createdBy], references: [id])
  products  Product[]
}

model Product {
  id          String      @id @default(uuid())
  sellerId    String?     @map("seller_id")
  name        String      @db.VarChar(255)
  description String      @db.Text
  price       Float
  stock       Int
  imageUrl    String
  categoryId  String      @map("category_id")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category    @relation(fields: [categoryId], references: [id])
  seller      Seller?     @relation(fields: [sellerId], references: [id])
  cartItems   CartItem[]
  OrderItem   OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @map("user_id")
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String   @map("cart_id")
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

model Order {
  id          String      @id @default(uuid())
  orderId     String      @map("order_id")
  userId      String      @map("user_id")
  user        User        @relation(fields: [userId], references: [id])
  sellerId    String      @map("seller_id")
  seller      Seller      @relation(fields: [sellerId], references: [id])
  totalPrice  Float
  shippingFee Float
  status      OrderStatus @default(PENDING)
  address     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String   @map("order_id")
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
